#user  nobody;
worker_processes  auto;
worker_rlimit_nofile 10000;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  5000;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    resolver 8.8.8.8;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$proxy_host" "$upstream_addr" '
		      '"$upstream_response_time" "$request_time"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #location ~* \.ts$ {
        #    proxy_pass  https://txtest.hls.nimo.tv;
        #    add_header Cache-Control "public, max-age=30";
        #}

        location ~* /([a-zA-Z0-9._-]*\.ts)$ {
            access_log /usr/local/openresty/nginx/logs/upstream.log main;
            set $upstream ${API_GATEWAY_URL};
            add_header Cache-Control "public, max-age=600";

            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                local param_id = ngx.var.arg_id
                local param_ratio = ngx.var.arg_ratio
                local param_needwm = ngx.var.arg_needwm
                key = param_id .. '-' .. (param_ratio or 'ratio-nil') .. '-' .. (param_needwm or 'needwm-nil')
                local res, err = red:get(key)
                if res and res ~= ngx.null then
                    ngx.var.upstream = res:gsub("(%w+%.m3u8)",ngx.var[1])
                --    ngx.say("cached ", ngx.var.args)
                end
                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
            }
            proxy_pass $upstream$is_args$args;
        }
        location ~* /([a-zA-Z0-9_]*\.m3u8)$ {
            root   html;
        #    index  index.html index.htm;
            default_type text/html;
            access_log /usr/local/openresty/nginx/logs/upstream.log main;
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 307 = @handle_m3u8_redirects;
            error_page 403 404 = @handle_upstream_m3u8_errors;
            set $url_key '';
            set $upstream_retry_count '1';
            set $arg_symbol $is_args;
	    set $args_gw '';
	    set $request_gw '';
            set $upstream ${API_GATEWAY_URL};
	    set $app ${API_GATEWAY_APP};
	    set $ext_ip ${EXTERNAL_IP};
	    #set $ext_ip $server_addr;
            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                local param_id = ngx.var.arg_id
                local param_ratio = ngx.var.arg_ratio
                local param_needwm = ngx.var.arg_needwm
                key = param_id .. '-' .. (param_ratio or 'ratio-nil') .. '-' .. (param_needwm or 'needwm-nil')
                local res, err = red:get(key)
                if res and res ~= ngx.null then
		    ngx.var.request_gw = 'N'
                    ngx.var.upstream = res
                    -- If the redirect URL already has parameters, appending the client URL parameters
                    -- should use '&' rather than '?'
                    if ngx.var.upstream:find("%?.+=") then
                        ngx.var.arg_symbol = "&"
                    else
                        ngx.var.arg_symbol = ngx.var.is_args
                    end
                --    ngx.say("cached ", ngx.var.args)
		else
		    ngx.var.request_gw = 'Y'
		    ngx.var.args_gw = '&appname=src&app=' .. ngx.var.app .. '&ip=' .. ngx.var.ext_ip
                end
                ngx.var.url_key = key
                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

            }
            proxy_pass $upstream$arg_symbol$args$args_gw;
        }
        location @handle_m3u8_redirects {
            #resolver 8.8.8.8
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 403 404 = @handle_upstream_m3u8_errors;
            error_page 500 502 503 504 = @handle_m3u8_redirects_errors;
            set $saved_redirect_location '$upstream_http_location';
	    set $request_gw 'N';
            rewrite_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                if ngx.var.saved_redirect_location:find("%?.+=") then
                    ngx.var.arg_symbol = "&"
                end
                ok, err = red:set(ngx.var.url_key, ngx.var.upstream_http_location, 'EX', ${REDIRECT_CACHE_EXPIRE})
                if not ok then
                    ngx.say("failed to set key: ", err)
                    return
                end
                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
            }
            proxy_pass $saved_redirect_location$arg_symbol$args;
        }

        location @handle_m3u8_redirects_errors {
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 500 502 503 504 = @handle_m3u8_redirects_errors;
            rewrite_by_lua_block {
                local num = tonumber(ngx.var.upstream_retry_count)              
                if num < 3 then 
                    num = num + 1
                    ngx.var.upstream_retry_count = num
                --  ngx.log(ngx.ERR,"upstream_retry_count + 1: ", ngx.var.upstream_retry_count)
                else
                    ngx.var.upstream_retry_count = 1
                    ngx.exec("@handle_upstream_m3u8_errors")
                end
            }

            proxy_pass $saved_redirect_location$arg_symbol$args;
            
        }

        location @handle_upstream_m3u8_errors {
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 307 = @handle_m3u8_redirects;
            set $upstream ${API_GATEWAY_URL};

	    # If error is returned from gateway, return 404 to client
	    if ($request_gw = 'Y') {
                #add_header request-gw "Y";
                return 404;
            }

            rewrite_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                -- Delete key to redirect to API gateway
                ok, err = red:del(ngx.var.url_key)
                if not ok then
                    ngx.say("failed to delete key: ", err)
                    return
                end

		if not ngx.var.args:find("app=") then
		    ngx.var.args_gw = '&appname=src&app=' .. ngx.var.app .. '&ip=' .. ngx.var.ext_ip
		end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
            }
            proxy_pass $upstream$is_args$args$args_gw;
        }
        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        # proxy the PHP scripts to Apache listening on ${REDIS_IP}:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://${REDIS_IP};
        #}
        # pass the PHP scripts to FastCGI server listening on ${REDIS_IP}:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   ${REDIS_IP}:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
