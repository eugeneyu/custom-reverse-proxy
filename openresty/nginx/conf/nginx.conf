#user  nobody;
worker_processes  auto;
worker_rlimit_nofile 10000;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  5000;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    resolver 8.8.8.8;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$proxy_host" "$upstream_addr" '
		              '"$upstream_response_time" "$request_time"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #location ~* \.ts$ {
        #    proxy_pass  https://txtest.hls.nimo.tv;
        #    add_header Cache-Control "public, max-age=30";
        #}

        location ~* /([a-zA-Z0-9._-]*\.ts)$ {
            access_log /usr/local/openresty/nginx/logs/upstream.log main;
            set $upstream ${API_GATEWAY_URL};
            add_header Cache-Control "public, max-age=600";
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 403 404 500 502 503 504 = @handle_ts_upstream_errors;

            set $url_key '';
            set $arg_symbol $is_args;
            set $origin_error_url '';
            set $origin_retired_ips '';
            set $upstream_ts_is_ip 'Y';
            set $upstream_ts_primary_ip 'Y';
            set $saved_ts_redirect_location '';
            set $upstream_ts_ip_cycle_count '1';
            set $upstream_ts_retry_count '3';

            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                local param_id = ngx.var.arg_id
                local param_ratio = ngx.var.arg_ratio
                local param_needwm = ngx.var.arg_needwm
                local key = param_id .. '-' .. (param_ratio or 'ratio-nil') .. '-' .. (param_needwm or 'needwm-nil')
                ngx.var.url_key = key
                local res, err = red:get(key)

                if res and res ~= ngx.null then
                    local res_data = require"cjson".decode(res)
                    if type(res_data) == "table" then 
                        ngx.var.upstream_ts_is_ip = 'Y';
                        ngx.exec("@handle_ts_upstream_errors_IP")
                    else
                        ngx.var.upstream_ts_is_ip = 'N';
                        ngx.var.upstream = res_data:gsub("(%w+%.m3u8)",ngx.var[1])
                        -- ngx.say("sdfdasf: ", ngx.var.upstream)
                        -- If the redirect URL already has parameters, appending the client URL parameters
                        -- should use '&' rather than '?'
                        if ngx.var.upstream:find("%?.+=") then
                            ngx.var.arg_symbol = "&"
                        else
                            ngx.var.arg_symbol = ngx.var.is_args
                        end
                        ngx.var.origin_error_url = ngx.var.upstream .. ngx.var.arg_symbol .. ngx.var.args
                        --ngx.say(ngx.var.upstream_response_url)
                    end
                        --  ngx.say("cached ", ngx.var.args)
                end
                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
            }
            proxy_pass $upstream$arg_symbol$args;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }

        location @handle_ts_upstream_errors {
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 403 500 502 503 504 = @handle_ts_upstream_errors;
            access_by_lua_block {
                if ngx.var.upstream_status == "404" then
                    ngx.exec("@handle_ts_return_origin_errors")
                end

                local num = tonumber(ngx.var.upstream_ts_retry_count)
                if num > 1 then                 
                    num = num - 1
                    ngx.var.upstream_ts_retry_count = num
                else
                    --the status code obtained here like this : "403 : 403 : 403"
                    --so ngx.var.upstream_status = "403 : 403 : 403"
                    ngx.exec("@handle_ts_return_origin_errors")
                end
            }
            proxy_pass $upstream$arg_symbol$args;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }

        location @handle_ts_upstream_errors_IP {
            access_log /usr/local/openresty/nginx/logs/upstream.log main;
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 403 404 500 502 503 504 = @handle_ts_upstream_errors_IP;
            rewrite_by_lua_block {
                local ts_ip_cycle_count = tonumber(ngx.var.upstream_ts_ip_cycle_count)
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                local res, err = red:get(ngx.var.url_key)
                local res_data = require"cjson".decode(res)
                -- First request the location IP, like http://192.168.1.1/xxx.xxx.com/live/aaa.m3u8.....
                -- if timeout then request the bakAddr IP(Replace IP and request)
                -- if all bakAddr IP timeout,then return origin error
                if ngx.var.upstream_ts_primary_ip == 'N' and ts_ip_cycle_count <= table.getn(res_data[3])  then            
                    if ts_ip_cycle_count == 1 then
                        ngx.var.saved_ts_redirect_location = string.gsub(ngx.var.saved_ts_redirect_location,res_data[2],res_data[3][ts_ip_cycle_count])
                    else
                        ngx.var.saved_ts_redirect_location = string.gsub(ngx.var.saved_ts_redirect_location,res_data[3][ts_ip_cycle_count-1],res_data[3][ts_ip_cycle_count])
                    end
                    ts_ip_cycle_count = ts_ip_cycle_count + 1
                    ngx.var.upstream_ts_ip_cycle_count = ts_ip_cycle_count
                elseif ngx.var.upstream_ts_primary_ip == 'N' and ts_ip_cycle_count > table.getn(res_data[3]) then
                    if ngx.var.saved_ts_redirect_location:find("%?.+=") then
                        ngx.var.arg_symbol = "&"
                    else
                        ngx.var.arg_symbol = ngx.var.is_args
                    end
                    ngx.var.origin_error_url = ngx.var.saved_ts_redirect_location .. ngx.var.arg_symbol .. ngx.var.args
                    ngx.var.origin_retired_ips = table.concat(res_data[3], ",")
                    ngx.exec("@handle_ts_return_origin_errors")
                elseif ngx.var.upstream_ts_primary_ip == 'Y'  then
                    ngx.var.saved_ts_redirect_location = res_data[1]:gsub("(%w+%.m3u8)", ngx.var[1])
                    if ngx.var.saved_ts_redirect_location:find("%?.+=") then
                        ngx.var.arg_symbol = "&"
                    else
                        ngx.var.arg_symbol = ngx.var.is_args
                    end
                end
                ngx.var.upstream_ts_primary_ip = 'N'
            }
            proxy_pass $saved_ts_redirect_location$arg_symbol$args;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }

        location @handle_ts_return_origin_errors {
            header_filter_by_lua_block {
                if ngx.var.upstream_ts_is_ip == "Y" then
                    ngx.header["X-Origin-Error"] = ngx.var.origin_error_url
                    ngx.header["X-Retried-Origin-Ips"] = ngx.var.origin_retired_ips
                    local return_status_code = string.sub(ngx.var.upstream_status, -3)
                    ngx.exit(tonumber(return_status_code))
                else
                    ngx.header["X-Origin-Error"] = ngx.var.origin_error_url
                    local return_status_code = string.sub(ngx.var.upstream_status, -3)
                    ngx.exit(tonumber(return_status_code))
                end
            }
            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                ok, err = red:del(ngx.var.url_key)
                if not ok then
                    ngx.say("failed to delete key: ", err)
                    return
                end
            }
        }



        location ~* /([a-zA-Z0-9_]*\.m3u8)$ {
            root   html;
            #    index  index.html index.htm;
            default_type text/html;
            access_log /usr/local/openresty/nginx/logs/upstream.log main;
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 307 = @handle_m3u8_redirects;
            error_page 403 404 = @handle_upstream_m3u8_errors;
            error_page 500 502 503 = @handle_m3u8_redirects_errors;
            error_page 504 = @handle_m3u8_timeout;
            set $url_key '';
            set $arg_symbol $is_args;
            set $args_gw '';
            set $request_gw '';
            set $upstream ${API_GATEWAY_URL};
            set $app ${API_GATEWAY_APP};
            set $ext_ip ${EXTERNAL_IP};
            set $request_gw_retry_count '8';
            set $upstream_primary_ip 'Y';
            set $upstream_is_ip '';
            set $upstream_ip_cycle_count '1';
            set $upstream_retry_count '3';

            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                local param_id = ngx.var.arg_id
                local param_ratio = ngx.var.arg_ratio
                local param_needwm = ngx.var.arg_needwm
                local key = param_id .. '-' .. (param_ratio or 'ratio-nil') .. '-' .. (param_needwm or 'needwm-nil')
                local res, err = red:get(key)
                ngx.var.url_key = key
                if res and res ~= ngx.null then
                    ngx.var.request_gw = 'N'
                    local res_data = require"cjson".decode(res)
                    if  type(res_data) == "table" then 
                        ngx.var.upstream_is_ip = 'Y';
                        ngx.exec("@handle_m3u8_redirects_IP")
                    else
                        ngx.var.upstream_is_ip = 'N';
                        ngx.var.upstream = res_data
                        -- If the redirect URL already has parameters, appending the client URL parameters
                        -- should use '&' rather than '?'
                        if ngx.var.upstream:find("%?.+=") then
                            ngx.var.arg_symbol = "&"
                        else
                            ngx.var.arg_symbol = ngx.var.is_args
                        end
                        --  ngx.say("cached ", ngx.var.args)
                    end
                else
                    ngx.var.request_gw = 'Y'
                    ngx.var.args_gw = '&appname=src&app=' .. ngx.var.app .. '&ip=' .. ngx.var.ext_ip
                end               
                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
            }
            proxy_pass $upstream$arg_symbol$args$args_gw;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;  
        }

        location @handle_m3u8_redirects {
            #resolver 8.8.8.8
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 307 = @handle_m3u8_redirects;
            error_page 403 404 = @handle_upstream_m3u8_errors;
            error_page 500 502 503 504 = @handle_m3u8_redirects_errors;
            set $saved_redirect_location '$upstream_http_location';
            set $saved_redirect_header '$upstream_http_bakAddr';
            set $request_gw 'N';
            set $upstream_primary_ip 'Y';
            set $upstream_ip_cycle_count '1';
            set $upstream_retry_count '3';
            
            rewrite_by_lua_block {
                local url_str = ngx.re.match(ngx.var.saved_redirect_location, "(?<=://)[A-Za-z0-9.-]+(?=/)")
                local chunks = {url_str[0]:match("(%d+)%.(%d+)%.(%d+)%.(%d+)")}
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                if ngx.var.saved_redirect_location:find("%?.+=") then
                    ngx.var.arg_symbol = "&"
                end
                if (#chunks == 4) then
                    local hygw_redirects_ipaddr = {}
                    local hygw_redirect_header_ip = {}
                    table.insert(hygw_redirects_ipaddr,ngx.var.saved_redirect_location)
                    table.insert(hygw_redirects_ipaddr,url_str[0])
                    for ip in string.gmatch(ngx.var.saved_redirect_header, '([^;]+)') do
                        table.insert(hygw_redirect_header_ip,ip)
                    end
                    table.insert(hygw_redirects_ipaddr,hygw_redirect_header_ip)
                    -- Store bakAddr information, redis value like this:
                    -- ["http:\/\/192.168.1.1\/xxx.xxx.com\/live\/aaaa.m3u8....",
                    --  "192.168.1.1",
                    -- [
                    --  "10.0.0.1",
                    --  "10.0.0.2",
                    --  "10.0.0.3",
                    --  "10.0.0.4"
                    -- ]
                    -- ]
                    ok, err = red:set(ngx.var.url_key, require"cjson".encode(hygw_redirects_ipaddr), 'EX', ${REDIRECT_CACHE_EXPIRE})
                    if not ok then
                        ngx.say("failed to set key: ", err)
                        return
                    end
                    -- put it into the connection pool of size 100,
                    -- with 10 seconds max idle time
                    local ok, err = red:set_keepalive(10000, 100)
                    if not ok then
                        ngx.say("failed to set keepalive: ", err)
                        return
                    end
                    -- ngx.say('test ip is set in redis')
                    ngx.exec("@handle_m3u8_redirects_IP")
                else
                    -- Store domain name information, redis value like this:
                    -- "http:\/\/xxx.xxx.com\/live\/aaa.m3u8..."
                    ok, err = red:set(ngx.var.url_key, require"cjson".encode(ngx.var.saved_redirect_location), 'EX', ${REDIRECT_CACHE_EXPIRE})
                    -- ngx.say('test domain is set in redis')
                    if not ok then
                        ngx.say("failed to set key: ", err)
                        return
                    end
                    -- put it into the connection pool of size 100,
                    -- with 10 seconds max idle time
                    local ok, err = red:set_keepalive(10000, 100)
                    if not ok then
                        ngx.say("failed to set keepalive: ", err)
                        return
                    end
                end
            }
            proxy_pass $saved_redirect_location$arg_symbol$args;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;  
        }

        location @handle_m3u8_redirects_IP {
            access_log /usr/local/openresty/nginx/logs/upstream.log main;
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 307 = @handle_m3u8_redirects;
            error_page 504 = @handle_m3u8_redirects_IP;
            error_page 403 404 = @handle_upstream_m3u8_errors;
            error_page 500 502 503 = @handle_m3u8_redirects_errors;
            rewrite_by_lua_block {
                local ip_cycle_count = tonumber(ngx.var.upstream_ip_cycle_count)
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                local res, err = red:get(ngx.var.url_key)
                local res_data = require"cjson".decode(res)

                -- First request the location IP, like http://192.168.1.1/xxx.xxx.com/live/aaa.m3u8.....
                -- if timeout then request the bakAddr IP(Replace IP and request)
                -- if all bakAddr IP timeout,then return gateway
                if ngx.var.upstream_primary_ip == 'N' and ip_cycle_count <= table.getn(res_data[3])  then
                                       
                    if ip_cycle_count == 1 then
                        ngx.var.saved_redirect_location = string.gsub(ngx.var.saved_redirect_location,res_data[2],res_data[3][ip_cycle_count])
                    else
                        ngx.var.saved_redirect_location = string.gsub(ngx.var.saved_redirect_location,res_data[3][ip_cycle_count-1],res_data[3][ip_cycle_count])
                    end
                    
                    ip_cycle_count = ip_cycle_count + 1
                    ngx.var.upstream_ip_cycle_count = ip_cycle_count
                    -- ngx.log(ngx.ERR,'saved_redirect_location count:',ngx.var.saved_redirect_location)
                elseif ngx.var.upstream_primary_ip == 'N' and ip_cycle_count > table.getn(res_data[3]) then                 
                    ngx.exec("@handle_upstream_m3u8_errors")
                elseif ngx.var.upstream_primary_ip == 'Y'  then
                    ngx.var.saved_redirect_location = res_data[1]
                    if ngx.var.saved_redirect_location:find("%?.+=") then
                        ngx.var.arg_symbol = "&"
                    else
                        ngx.var.arg_symbol = ngx.var.is_args
                    end
                end
                ngx.var.upstream_primary_ip = 'N'
            }
            proxy_pass $saved_redirect_location$arg_symbol$args;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;  
            
        }

        location @handle_m3u8_redirects_errors {
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 500 502 503 504 = @handle_m3u8_redirects_errors;
            # If error is returned from gateway, return 404 to client
            if ($request_gw = 'Y') {
                #add_header request-gw "Y";
                return 404;
            }
            # If error is returned from back to the source, then retry again
            rewrite_by_lua_block {
                if ngx.var.upstream_is_ip == 'N' then
                    ngx.var.saved_redirect_location = ngx.var.upstream
                end
                local num = tonumber(ngx.var.upstream_retry_count)             
                if num > 1 then 
                    num = num - 1
                    ngx.var.upstream_retry_count = num
                    -- ngx.log(ngx.ERR,"upstream_retry_count - 1: ", ngx.var.upstream_retry_count)
                else
                    ngx.exec("@handle_upstream_m3u8_errors")
                end
            }
            proxy_pass $saved_redirect_location$arg_symbol$args;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;  
        }

        location @handle_upstream_m3u8_errors {
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 307 = @handle_m3u8_redirects;
            set $upstream ${API_GATEWAY_URL};
            # If error is returned from gateway, return 404 to client
            if ($request_gw = 'Y') {
                #add_header request-gw "Y";
                return 404;
            }
            rewrite_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                -- Delete key to redirect to API gateway
                ok, err = red:del(ngx.var.url_key)
                if not ok then
                    ngx.say("failed to delete key: ", err)
                    return
                end
                if not ngx.var.args:find("app=") then
                    ngx.var.args = ngx.var.args .. '&app=' .. ngx.var.app
                end
                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
            }
            proxy_pass $upstream$is_args$args$args_gw;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;  
        }

        location @handle_m3u8_timeout {
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 307 = @handle_m3u8_redirects;
            error_page 403 404 = @handle_upstream_m3u8_errors;
            error_page 500 502 503 = @handle_m3u8_redirects_errors;
            error_page 504 = @handle_m3u8_timeout;
            rewrite_by_lua_block {
                -- if request gw timeout ,retry again
                -- if request doamin name timeout , go to @handle_m3u8_redirects_errors
                if ngx.var.request_gw == 'Y' then
                    local num = tonumber(ngx.var.request_gw_retry_count)              
                    if num > 1 then 
                        num = num - 1
                        ngx.var.request_gw_retry_count = num
                        --ngx.log(ngx.ERR,"request_gw_retry_count - 1: ", ngx.var.request_gw_retry_count)
                    else
                        ngx.exit(404)
                    end
                else
                    ngx.exec("@handle_m3u8_redirects_errors")
                end
            }
            proxy_pass $upstream$arg_symbol$args$args_gw;
            proxy_connect_timeout 3s; 
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;    
        
        }
        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}