
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    resolver 8.8.8.8;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$proxy_host" "$upstream_addr"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #location ~* \.ts$ {
        #    proxy_pass  https://txtest.hls.nimo.tv;
        #    add_header Cache-Control "public, max-age=30";
        #}

	location ~* /([a-zA-Z0-9_-]*\.ts)$ {
	    access_log /usr/local/openresty/nginx/logs/upstream.log main;
			set $upstream ${API_GATEWAY_URL};
	    add_header Cache-Control "public, max-age=30";

	    access_by_lua_block {
		local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

		ngx.var.filename = ngx.var[1]
                local param_id = ngx.var.arg_id
                local param_ratio = ngx.var.arg_ratio
                local param_needwm = ngx.var.arg_needwm

		key = param_id .. '-' .. (param_ratio or 'ratio-nil') .. '-' .. (param_needwm or 'needwm-nil')
                local res, err = red:get(key)
		if res and res ~= ngx.null then
                    ngx.var.upstream = res:gsub("(%w+%.m3u8)",ngx.var[1])
                --    ngx.say("cached ", ngx.var.args)
                end

		-- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
	    }
	    proxy_pass $upstream$is_args$args;
	}

        location ~* /([a-zA-Z0-9_]*\.m3u8)$ {
            root   html;
        #    index  index.html index.htm;
	    default_type text/html;
	    access_log /usr/local/openresty/nginx/logs/upstream.log main;
	    proxy_intercept_errors on;
	    error_page 301 302 307 = @handle_redirects;
	    set $url_key '';
	    set $filename '';
	    set $upstream ${API_GATEWAY_URL};

	    access_by_lua_block {
		local redis = require "resty.redis"
                local red = redis:new()
		red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

		ngx.var.filename = ngx.var[1]
		local param_id = ngx.var.arg_id
		local param_ratio = ngx.var.arg_ratio
		local param_needwm = ngx.var.arg_needwm

		key = param_id .. '-' .. (param_ratio or 'ratio-nil') .. '-' .. (param_needwm or 'needwm-nil')
		local res, err = red:get(key)
                if res and res ~= ngx.null then
                    ngx.var.upstream = res:gsub("(%w+%.m3u8)",ngx.var[1])
		    ngx.var.filename = ''
		--    ngx.say("cached ", ngx.var.args)
                end
		ngx.var.url_key = key

		-- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
		
	    }

	    proxy_pass $upstream$is_args$args;
        }

	location @handle_redirects {
	    #resolver 8.8.8.8
	    set $saved_redirect_location '$upstream_http_location';

	    rewrite_by_lua_block {
		local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
		local ok, err = red:connect("${REDIS_IP}", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

		ok, err = red:set(ngx.var.url_key, ngx.var.upstream_http_location, 'EX', ${REDIRECT_CACHE_EXPIRE})
                if not ok then
                    ngx.say("failed to set key: ", err)
                    return
                end


		-- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

	    }
            proxy_pass $saved_redirect_location$is_args$args;
 	}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
